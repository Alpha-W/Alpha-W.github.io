==========================
Josephus问题探微
==========================
:Author: Hau Wong
:Date:   2019-07-26
:Category: 算法

问题重述
==========================
编号为 :math:`0`\到 :math:`n-1`\的 :math:`n`\个士兵围坐在一起形成一个圆圈,从编号为 :math:`0`\的士兵开始依次报数( :math:`0,1,2...`\这样依次报),数到 :math:`m-1`\的 士兵会被杀死出列,之后的士兵再从 :math:`0`\开始报数.直到最后剩下一名士兵,求这个士兵的编号.

一般解法
==========================

一. 数组解法:
--------------------------
用数组模拟问题的过程

.. code:: c

   int josephus(int n, int m){
       int a[n];
       a[n-1] = 0;
       for(int i = 0; i < n-1; ++i){
           a[i] = i+1;
       }
       int c = n-1, j = 0, count = 0;
       while(count < n-1){
           if(j == m-1){
               j = 0;
               a[c] = a[a[c]]; // 删除当前存活者 
               count++; 
           }else{
               ++j;
               c = a[c];
           }
       }
       return c;
   }

二. 链表解法:
--------------------------
用链表代替数组模拟问题过程.

.. code:: c

   typedef struct NODE{
       int num;
       struct NODE* next;
   }PN;
   
   int josephus(int n, int m){ 
       PN* head = (PN*)malloc(sizeof(PN));
       head->num = 0;
       head->next = NULL;
       PN* tail = head; // 恒指向链表尾 
       for(int i = 1; i < n; ++i){
           tail->next = (PN*)malloc(sizeof(PN));
           tail = tail->next;
           tail->num = i;
           tail->next = NULL;
       }
       tail->next = head; // 链成环
       PN* p = head;
       int j = 0; // 报数器 
       while(p->next != p){ // 如果 p 的下一个结点指向自己，说明环中只剩一个结点 
           if(j == m-2){ // 每次报到 m-2 删除当前 p 指向结点的下一个结点 
               PN* q = p->next;
               p->next = q->next;
               free(q); // 释放内存 
               p = p->next;
               j = 0;
           }else{
               p = p->next;
               ++j;
           }
       } 
       return p->num;
   }

这两种算法的时间复杂度均为 :math:`O(mn)`\

三. 递归解法:
--------------------------
设 :math:`f(n,m)`\为最后幸存者的标号,则初始情形为 :math:`0,1,2...n-1`\,第一轮过后情形为 :math:`m\%n,(m+1)\%n...(m-2)\%n`\出局者标号为 :math:`(m-1)\%n`\.这是一个 :math:`n-1`\个士兵的情形.将其与 :math:`f(n-1,m)`\的初始情形 :math:`0,1,2...n-2`\作比较,发现 :math:`f(n-1,m)`\的初始情形到 :math:`f(n,m)`\的第一轮后的情形有对应关系 :math:`\phi(k)=(m+k)\%n`\.设 :math:`x`\为 :math:`f(n-1,m)`\的解, 则 :math:`\phi(x)`\为:math:`f(n,m)`\的解.由此我们得到 :math:`f(n,m)=\phi(f(n-1,m))=(f(n-1,m)+m)\%n`\.

再由初始条件 :math:`f(1,m)=0`\,我们得到递归方程: 

.. math::

   \\f(n,m)=\left\{
   \begin{array}{ll}
   0, &\mbox{ $n=1$;}  \\
   (f(n-1,m)+m)\%n, &\mbox{ $else$ }
   \end{array}
   \right.

代码如下:

.. code:: c

   int josephus(int n, int m){ 
       josephus(1,m)=0;
       return (josephus(n-1,m)+m)%n;
   }

时间复杂度为 :math:`O(n)`\

特殊情形
==========================
我们已经知道一般解法是:math:`O(n)`\,但在某些特殊情况下可以缩短到 :math:`O(m log(n))`\甚至是 :math:`O(1)`\

:math:`m=1`\时,最后一名幸存者显然是标号为 :math:`n-1`\的人.
:math:`m=2`\时,

S1:我们先观察 :math:`m=2`\时Josephus问题有什么特点.设 :math:`f(n)`\为最后幸存者的标号,对于 :math:`n`\我们分两种情况讨论: 

   [1]. :math:`n`\为偶数时.设 :math:`n=2j`\,初始情形为 :math:`0,1,2...2j-1`\.经过 :math:`j`\轮后(即 :math:`n`\个士兵出局)的情形为 :math:`0,2,4...2j-2`\.我们将其与问题 :math:`f(j)`\作比较,发现 :math:`f(j)`\的初始情形为 :math:`0,1,2...j-1`\.这两者的下标有如下对应关系 :math:`\phi(k)=\frac{k}{2}`\那么如果 :math:`x`\是 :math:`f(2j)`\的解,那么 :math:`\phi(x)`\就是 :math:`f(j)`\的解,故有 :math:`\frac{f(2j)}{2}=f(j)`\,即 :math:`f(2j)=2f(j)`\ 

   [2]. :math:`n`\为奇数时.设 :math:`n=2j+1`\,类似地,初始情形为 :math:`0,1,2...2j`\.经过 :math:`j+1`\轮后的情形为 :math:`2,4,6...2j`\.其与 :math:`f(j)`\的初始情形 :math:`0,1,2...j-1`\有对应关系 :math:`\phi(k)=\frac k 2 -1`\.则 :math:`\phi(f(2j+1))=f(j)`\,即 :math:`f(2j+1)=2f(j)+2`\

S2:列出前几项 :math:`f(n)`\后我们可以发现如下规律: 

似乎有 :math:`f(2^m)=0`\,并且 :math:`n`\依次取 :math:`2^m`\到 :math:`2^{m+1}`\之间的数所形成的数列为 :math:`0`\到 :math:`2^{m+1}-2`\的等差数列 

也即:若 :math:`n=2^m+l,l\in [0,2^m)`\,则 :math:`f(n)=2l`\

下面来用数学归纳法证明这一命题: 

:math:`n=1`\时, :math:`f(1)=0`\命题显然成立,下面假设对所有小于 :math:`n`\的正整数,命题均成立. 

   [1]. :math:`n`\为偶数时.设 :math:`n=2^m+l,l\in [0,2^m)`\,则 :math:`\frac n 2=2^{m_1}+l_{1} ,l=2l_{1}`\,则 :math:`f(n)=f(2^m +l)=2f(2^{m_1}+l_1)=4l_1=2l`\

   [2]. :math:`n`\为奇数时.设 :math:`n=2^m+l,l\in [0,2^m)`\,则 :math:`\frac {n-1} 2=2^{m_1}+l_{1},l=2l_{1}+1`\,则 :math:`f(n)=f(2^m +l)=2f(2^{m_1}+l_1)+2=4l_1+2=2l`\

S3:由S2,我们有:若 :math:`n=2^m+l,l\in [0,2^m)`\,则 :math:`f(n)=2l`\,则 :math:`m=\lfloor lb(n)\rfloor,l=n-2^{\lfloor lb(n)\rfloor}`\
我们最终得出:

.. math::

   Josephus(n,2)=2n-2^{1+\lfloor lb(n)\rfloor}\\

:math:`m=3`\且 :math:`n>4`\时,

Lorenz Halbeisen 和 Norbert Hungerbühler在1997年发现了 :math:`m=3`\的一个封闭解,但遗憾的是解的准确度依赖于某个常数的精确度,故此解只能作为理论使用.

.. math::

   Josephus(n,3)=3n-3\cdot round(\alpha\cdot(\frac 3 2)^k)+d \\
   
其中, :math:`\alpha=lim_{l\to\infty}c_{l}\cdot(\frac 2 3)^l\approx0.811135023828471063676793239905326260657990722762...`\

:math:`c_l`\由下式确定:

.. math::

   \left\{
   \begin{array}{}
    \mbox{$c_{1}=1,d_{1}=0$}  \\
    \mbox{$c_{l+1}=\lceil\frac{3c_{l}-d_{l}}{2}\rceil$} \\
    \mbox{$d_{l+1}=(d_{l}-c_{l})\%2$}\\
   \end{array}
   \right.

k为满足 :math:`round(\alpha\cdot(\frac 3 2)^k)\le n`\的最大整数.

.. math:: 
 
   d=\left\{
   \begin{array}{ll}
   0, &\mbox{ $\alpha\cdot(\frac 3 2)^k>round(\alpha\cdot(\frac 3 2)^k)$;} \\ {}
   1, &\mbox{ $\alpha\cdot(\frac 3 2)^k<round(\alpha\cdot(\frac 3 2)^k)$ }
   \end{array}
   \right.\\

:math:`1<m<=n`\时,

.. math::

   Josephus(n,m)=\lfloor \frac{m}{m-1}((Josephus(n-\lfloor\frac{n}{m}\rfloor,m)-n\%m)\%(n-\lfloor\frac{n}{m}\rfloor))\rfloor\\

时间复杂度为 :math:`O(m log (n))`\

据此,我们将算法总结如下:

.. code:: c

   long long jos3(long long n)
   {
    int d;
    long double a=0.811135023828471063676793239905326260657990722762;
    long long m;
    m=(long long)roundl(log2l(n/a)/log2l(1.5));
    if(roundl(a*powl(1.5,m))>n) m--;
    if(a*powl(1.5,m)<roundl(a*powl(1.5,m))) d=1;
    else d=0;
    return (3*(n-(long long)roundl(a*powl(1.5,m)))+d);
   }
   long long Jos(long long n,long long m) {
    if (n < 3LL) return m%n;
    if (m == 1LL) return n - 1LL;
    if (m == 2LL) return 2LL*n-(long long)powl(2,floorl(1+log2l(n)));
    if (m == 3LL && (n==3||n==4)) return n%2;
    if (m == 3LL && (n>=5)) return jos3(n);
    if (m > n && n>3) return (Jos(n - 1LL, m) + m) % n;
    long long cnt = n / m;
    long long res = Jos(n - cnt, m)-(n % m);
    if (res < 0LL) res += n;
    else res += res / (m - 1LL);
    return res;
   }


问题变体
==========================
有些时候我们会遇到标号是从 :math:`1`\到 :math:`n`\而非 :math:`0`\到 :math:`n-1`\的情形,记此时问题的解为 :math:`g(n,m)`\,这个时候我们仍沿用之前的思路,找到标号之间的对应关系,不难得出 :math:`g(n,m)=f(n,m)+1`\.更一般的,标号从 :math:`d`\到 :math:`d+n`\时的问题解 :math:`h(n,m)=f(n,m)+d`\
   
Josephus问题的解不受报数的起始数字的影响,只与报数的周期有关.
