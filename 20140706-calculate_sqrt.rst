==========================
浅谈手开二次方
==========================
:Author: Hau Wong
:Date:   2014-07-06
:Category: 算法

注：原载于QQ空间．

本来打算去年暑假写的，中途因各种琐事而搁置，这一搁置竟是一年之久。一方面，我想让大家知道，遇到估算平方根，并不是只有按计算器才能解决，自己手算也是可行的。另一方面，我也颇感某些同学过度依赖计算器而丧失部分基本的运算能力，诸如 :math:`\sqrt{163.84}`\也直接按计算器等等现象。对于本文所述方法早已了如指掌的同学，可直接点返回。另外，由于本人水平有限，若出现有失妥当之处，还望见谅。

手算平方根有许多种方法，大致可分为初等方法和高等方法。本文只叙述其中比较常见的几种，若有其他方法，欢迎补充。

竖式法
==========================

这种方法曾见于老版初中教科书，但课改后删除了这一内容，所以多数人不知道这种方法（据说此法出于《九章算术》，本人未考证）

第一步:列式，与除法的格式类似，被开方数写里面。

第二步:分节，将被开方数（整数）从右至左每两个分为一节，打一个逗号。例如 :math:`13738835`\可分为 :math:`13,73,88,35`\再例如 :math:`81257`\可分为 :math:`8,12,57`\对于小数而言可考虑乘以 :math:`10^{2k}`\化为整数再分节。

第三步：计算，从左起第一节开始，试出不超过第一节的最大完全平方数的算术平方根，记在被开方数之上，被开方数与该数的平方之差记在被开方数之下。例如第一节为 :math:`22`\，因 :math:`4^2＜22＜5^2`\，则将 :math:`4`\记在 :math:`22`\的上方，此为第一位商，又因 :math:`22-4^2=6`\，则将 :math:`6`\记在下方。再将第二节写到下方，即第一节所得余数之后。接下来将第一位商乘以 :math:`20`\(所得之数暂且叫做中间数)第二位商应满足的条件是:能使其与中间数之和与其之积小于等于最下方之数的最大整数。并将最下方之数减去第二位商与中间数之和与其之积，所得之数则为第二节所得余数。后面节和第二节处理方法相同，直至余数为零为止，则被开方数上方所记之数为所求的算术平方根。例如算 :math:`\sqrt{576}`\，第一位商为 :math:`2`\，余数为 :math:`1`\,中间数为 :math:`40`\，第二位商满足 :math:`x(40+x)`\小于等于 :math:`176`\且最大，验算可知第二位商为 :math:`4`\，（ :math:`44*4=176`\）余数为零，所以 :math:`\sqrt{576}=24`\。另外遇到开不尽的情况可一节一节补零，直到达到所需要的精度为止。

不等式法
==========================
此法见于k姐姐在06年发的帖子之中，不知之前是否有人发现。此法称得上是巧妙。

欲估算 :math:`\sqrt{a}`\，先粗略估算其整数位，并记为 :math:`p`\，再粗略估算 :math:`-p+√a`\是在 :math:`(0,\frac{1}{2})`\还是 :math:`(\frac{1}{2},1)`\中，可得 :math:`0＜-p+\sqrt{a}＜\frac{1}{2}`\或 :math:`\frac{1}{2}＜-p+\sqrt{a}＜1`\。以第一种情况为例，将此不等式三边平方，得到 :math:`0＜s-t\sqrt{a}＜\frac{1}{4}`\的不等式，再移项得 :math:`\frac{s}{t}＞√a＞\frac{s-\frac{1}{4}}{t}`\此时精度已初步提高了。再移项化为不等式中间形如 :math:`s-t\sqrt{a}`\的形式（注:此时的 :math:`s`\与 :math:`t`\并非上一步所述之值）。再三边平方……以此类推，每平方一次，精度都会有所提高。第二种情况的步骤与第一种情况的相同.

求根法
==========================
一般最容易想到的方法，也是最适合编程的方法。高中教材上有部分内容。

我们可将这一问题转化为：求 :math:`x^2-a=0`\的数值解。这样一来问题的解决又多了一类方法。

二分法在此不详述，其原理就是根据勘根定理，不断缩小根所在区间而达到目的，另外一些迭代法，跟二分法大同小异，比如弦截法等等，在此不作讨论。我们主要来说一说牛顿法。对于方程 :math:`f(x)=0`\,迭代公式为 :math:`X=X-\frac{f(x)}{f^{\prime}(x)}`\。若令 :math:`f(x)=x^2-a`\,可得估算 :math:`\sqrt{a}`\的迭代公式为 :math:`x_{n+1}=\frac{x_{n}+\frac{a}{x_{n}}}{2}`\ 此法收敛较快，只要初始值设定得不是太离谱，基本上三四步迭代就可以达到较高精度的值。

丢番图逼近法
==========================
起于数论，基本工具就是连分数，连分数所产生的渐近分数都是在分母数位相同情况下的最佳逼近。与佩尔方程存在一定关系。有多种方法可以得到某个二次无理数的连分数，且易证二次无理数的连分数具有周期性。这里简述一种。

对于 :math:`\sqrt{a}`\，设其整数部分为 :math:`p`\，则 :math:`\sqrt{a}=p+\sqrt{a}-p`\，则 :math:`\sqrt{a}-p=\frac{1}{\frac{1}{√a-p}}=\frac{a-p^2}{p+\sqrt{a}}`\所以 :math:`\sqrt{a}=p+\frac{a-p^2}{p+√a}因此 :math:`\sqrt{a}=p +(a-p^2)/(2p+(a-p^2)/(2p+(a-p^2)/……)`\取前几项计算即可。

微分法
==========================
在近似计算中微分法占有举足轻重的地位。各类高等数学书都有。
这种方法局限性很大，只适用于增量比较小的情况下。一般的，对于 :math:`x_{0}`\附近某点 :math:`x`\,在 :math:`\mid x-x_{0}\mid`\比较小的情况下，有 :math:`f(x)≈f(x_{0})+f^{\prime}(x)(x-x_{0})`\，易得当 :math:`\mid x\mid`\比较小时，有 :math:`\sqrt{1+x}≈1+\frac{x}{2}`\

泰勒展开法
==========================
泰勒展开在数值分析中发挥着很大的作用，这种方法过人之处是可以估算某些不能直接计算数值的函数，比如lnx,sinx,cosx等等。一般取前几项估算，后面的余项是高阶无穷小，不予考虑。
由于 :math:`\sqrt{x}`\在 :math:`x=0`\上各阶导数均不存在，所以一般按 :math:`x=1`\泰勒展开，如果 :math:`x`\距离 :math:`1`\比较远的话，可以考虑先除以一个完全平方数，再展开。
公式如下： :math:`f(x)≈1+\frac{x-1}{2}-\frac{(x-1)^2}{8}+\frac{(x-1)^3}{16}-\frac{5(x-1)^4}{128}+\frac{7(x-1)^5}{256}-\frac{21(x-1)^6}{1024}+-……`\一般取前5,6项即可达到相当的精度。
这几种方法各有千秋，各有特色。若能互相补充使用并熟练使用，心算平方根不再是梦。
